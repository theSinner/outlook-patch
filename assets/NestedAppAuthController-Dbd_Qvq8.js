import{O as v,S as I,A as g,c as T,n as R,e as f,a as l,B as i,I as y,b as U,C as p,d as E,f as b,g as N,u as q,R as P,h as x,D as S,E as B,i as u,j as d,P as w,k}from"./index-BML42XsW.js";/*! @azure/msal-browser v3.11.1 2024-03-27 */function _(h){return h.status!==void 0}/*! @azure/msal-browser v3.11.1 2024-03-27 */class O{constructor(e,t,r,n){this.clientId=e,this.clientCapabilities=t,this.crypto=r,this.logger=n}toNaaTokenRequest(e){var s;let t;e.extraQueryParameters===void 0?t=new Map:t=new Map(Object.entries(e.extraQueryParameters));const n=new P().addClientCapabilitiesToClaims(e.claims,this.clientCapabilities),a=e.scopes||v;return{platformBrokerId:(s=e.account)==null?void 0:s.homeAccountId,clientId:this.clientId,authority:e.authority,scope:a.join(" "),correlationId:e.correlationId!==void 0?e.correlationId:this.crypto.createNewGuid(),claims:I.isEmptyObj(n)?void 0:n,state:e.state,authenticationScheme:e.authenticationScheme||g.BEARER,extraParameters:t}}fromNaaTokenResponse(e,t,r){if(!t.token.id_token||!t.token.access_token)throw T(R);const n=new Date((r+(t.token.expires_in||0))*1e3),a=f(t.token.id_token,this.crypto.base64Decode),c=this.fromNaaAccountInfo(t.account,a),s=t.token.scope||e.scope;return{authority:t.token.authority||c.environment,uniqueId:c.localAccountId,tenantId:c.tenantId,scopes:s.split(" "),account:c,idToken:t.token.id_token,idTokenClaims:a,accessToken:t.token.access_token,fromCache:!0,expiresOn:n,tokenType:e.authenticationScheme||g.BEARER,correlationId:e.correlationId,extExpiresOn:n,state:e.state}}fromNaaAccountInfo(e,t){const r=t||e.idTokenClaims,n=e.localAccountId||(r==null?void 0:r.oid)||(r==null?void 0:r.sub)||"",a=e.tenantId||(r==null?void 0:r.tid)||"",c=e.homeAccountId||`${n}.${a}`,s=e.username||(r==null?void 0:r.preferred_username)||"",A=e.name||(r==null?void 0:r.name);return{homeAccountId:c,environment:e.environment,tenantId:a,username:s,localAccountId:n,name:A,idToken:e.idToken,idTokenClaims:r}}fromBridgeError(e){if(_(e))switch(e.status){case i.UserCancel:return new p(q);case i.NoNetwork:return new p(N);case i.AccountUnavailable:return new p(b);case i.Disabled:return new p(E);case i.NestedAppAuthUnavailable:return new p(e.code||E,e.description);case i.TransientError:case i.PersistentError:return new U(e.code,e.description);case i.UserInteractionRequired:return new y(e.code,e.description);default:return new l(e.code,e.description)}else return new l("unknown_error","An unknown error occurred")}}/*! @azure/msal-browser v3.11.1 2024-03-27 */const C={unsupportedMethod:{code:"unsupported_method",desc:"The PKCE code challenge and verifier could not be generated."}};class o extends l{constructor(e,t){super(e,t),Object.setPrototypeOf(this,o.prototype),this.name="NestedAppAuthError"}static createUnsupportedError(){return new o(C.unsupportedMethod.code,C.unsupportedMethod.desc)}}/*! @azure/msal-browser v3.11.1 2024-03-27 */class m{constructor(e){this.operatingContext=e;const t=this.operatingContext.getBridgeProxy();if(t!==void 0)this.bridgeProxy=t;else throw new Error("unexpected: bridgeProxy is undefined");this.config=e.getConfig(),this.logger=this.operatingContext.getLogger(),this.performanceClient=this.config.telemetry.client,this.browserCrypto=e.isBrowserEnvironment()?new x(this.logger,this.performanceClient):S,this.eventHandler=new B(this.logger,this.browserCrypto),this.nestedAppAuthAdapter=new O(this.config.auth.clientId,this.config.auth.clientCapabilities,this.browserCrypto,this.logger)}getBrowserStorage(){throw o.createUnsupportedError()}getEventHandler(){return this.eventHandler}static async createController(e){const t=new m(e);return Promise.resolve(t)}initialize(){return Promise.resolve()}ensureValidRequest(e){return e!=null&&e.correlationId?e:{...e,correlationId:this.browserCrypto.createNewGuid()}}async acquireTokenInteractive(e){const t=this.ensureValidRequest(e);this.eventHandler.emitEvent(u.ACQUIRE_TOKEN_START,d.Popup,t);const r=this.performanceClient.startMeasurement(w.AcquireTokenPopup,t.correlationId);r==null||r.add({nestedAppAuthRequest:!0});try{const n=this.nestedAppAuthAdapter.toNaaTokenRequest(t),a=k(),c=await this.bridgeProxy.getTokenInteractive(n),s=this.nestedAppAuthAdapter.fromNaaTokenResponse(n,c,a);return this.operatingContext.setActiveAccount(s.account),this.eventHandler.emitEvent(u.ACQUIRE_TOKEN_SUCCESS,d.Popup,s),r.add({accessTokenSize:s.accessToken.length,idTokenSize:s.idToken.length}),r.end({success:!0,requestId:s.requestId}),s}catch(n){const a=this.nestedAppAuthAdapter.fromBridgeError(n);throw this.eventHandler.emitEvent(u.ACQUIRE_TOKEN_FAILURE,d.Popup,null,n),r.end({success:!1},n),a}}async acquireTokenSilentInternal(e){const t=this.ensureValidRequest(e);this.eventHandler.emitEvent(u.ACQUIRE_TOKEN_START,d.Silent,t);const r=this.performanceClient.startMeasurement(w.SsoSilent,t.correlationId);r==null||r.increment({visibilityChangeCount:0}),r==null||r.add({nestedAppAuthRequest:!0});try{const n=this.nestedAppAuthAdapter.toNaaTokenRequest(t),a=k(),c=await this.bridgeProxy.getTokenSilent(n),s=this.nestedAppAuthAdapter.fromNaaTokenResponse(n,c,a);return this.operatingContext.setActiveAccount(s.account),this.eventHandler.emitEvent(u.ACQUIRE_TOKEN_SUCCESS,d.Silent,s),r==null||r.add({accessTokenSize:s.accessToken.length,idTokenSize:s.idToken.length}),r==null||r.end({success:!0,requestId:s.requestId}),s}catch(n){const a=this.nestedAppAuthAdapter.fromBridgeError(n);throw this.eventHandler.emitEvent(u.ACQUIRE_TOKEN_FAILURE,d.Silent,null,n),r==null||r.end({success:!1},n),a}}async acquireTokenPopup(e){return this.acquireTokenInteractive(e)}acquireTokenRedirect(e){throw o.createUnsupportedError()}async acquireTokenSilent(e){return this.acquireTokenSilentInternal(e)}acquireTokenByCode(e){throw o.createUnsupportedError()}acquireTokenNative(e,t,r){throw o.createUnsupportedError()}acquireTokenByRefreshToken(e,t){throw o.createUnsupportedError()}addEventCallback(e){return this.eventHandler.addEventCallback(e)}removeEventCallback(e){this.eventHandler.removeEventCallback(e)}addPerformanceCallback(e){throw o.createUnsupportedError()}removePerformanceCallback(e){throw o.createUnsupportedError()}enableAccountStorageEvents(){throw o.createUnsupportedError()}disableAccountStorageEvents(){throw o.createUnsupportedError()}getAccount(e){throw o.createUnsupportedError()}getAccountByHomeId(e){const t=this.operatingContext.getActiveAccount();return t!==void 0&&t.homeAccountId===e?this.nestedAppAuthAdapter.fromNaaAccountInfo(t):null}getAccountByLocalId(e){const t=this.operatingContext.getActiveAccount();return t!==void 0&&t.localAccountId===e?this.nestedAppAuthAdapter.fromNaaAccountInfo(t):null}getAccountByUsername(e){const t=this.operatingContext.getActiveAccount();return t!==void 0&&t.username===e?this.nestedAppAuthAdapter.fromNaaAccountInfo(t):null}getAllAccounts(){const e=this.operatingContext.getActiveAccount();return e!==void 0?[this.nestedAppAuthAdapter.fromNaaAccountInfo(e)]:[]}handleRedirectPromise(e){return Promise.resolve(null)}loginPopup(e){if(e!==void 0)return this.acquireTokenInteractive(e);throw o.createUnsupportedError()}loginRedirect(e){throw o.createUnsupportedError()}logout(e){throw o.createUnsupportedError()}logoutRedirect(e){throw o.createUnsupportedError()}logoutPopup(e){throw o.createUnsupportedError()}ssoSilent(e){return this.acquireTokenSilentInternal(e)}getTokenCache(){throw o.createUnsupportedError()}getLogger(){return this.logger}setLogger(e){this.logger=e}setActiveAccount(e){this.logger.warning("nestedAppAuth does not support setActiveAccount")}getActiveAccount(){const e=this.operatingContext.getActiveAccount();return e!==void 0?this.nestedAppAuthAdapter.fromNaaAccountInfo(e):null}initializeWrapperLibrary(e,t){}setNavigationClient(e){this.logger.warning("setNavigationClient is not supported in nested app auth")}getConfiguration(){return this.config}isBrowserEnv(){return this.operatingContext.isBrowserEnvironment()}getBrowserCrypto(){return this.browserCrypto}getPerformanceClient(){throw o.createUnsupportedError()}getRedirectResponse(){throw o.createUnsupportedError()}async clearCache(e){throw o.createUnsupportedError()}async hydrateCache(e,t){throw o.createUnsupportedError()}}export{m as NestedAppAuthController};
